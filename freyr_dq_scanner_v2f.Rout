
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: arm-unknown-linux-gnueabihf (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## !/bin/r
> ## by Konrad Keck
> 
> #sink("/home/pi/sink-dq_scanner.txt")
> 
> # need lubridate or everything else doesn't work
> if (!require("lubridate")) {
+ 	install.packages("lubridate")
+ 	library("lubridate")
+ }
Loading required package: lubridate

Attaching package: ‘lubridate’

The following object is masked from ‘package:base’:

    date

> 
> 
> # limits and standards ------------------------------------------------------
> 
> cron = 60 * 24 # run every 'cron' minutes
> n = NA # if NA then h hours equivilant
> h = cron * 24 / 6 #number of hours of content
> t = (cron - .25) * 60 #45.54
> db_path = "/home/pi/freyr-tst.db"
>   
> # only run every 'cron' minutes ---------------------------------------------
> # if (1 >= (as.integer(format.POSIXct(Sys.time(), format = "%s")) / 60) %% cron) {
> 
> # packages ----------------------------------------------------------------
> 
> if (!require("RSQLite")) {
+ 	install.packages("RSQLite")
+ 	library("RSQLite")
+ }
Loading required package: RSQLite
> 
> if (!require("DBI")) {
+ 	install.packages("DBI")
+ 	library("DBI")
+ }
Loading required package: DBI
> 
> if (!require("plyr")) {
+ 	install.packages("plyr")
+ 	library("plyr")
+ }
Loading required package: plyr

Attaching package: ‘plyr’

The following object is masked from ‘package:lubridate’:

    here

> 
> if (!require("lsr")) {
+ 	install.packages("lsr")
+ 	library("lsr")
+ }
Loading required package: lsr
> 
>   
>   # Reading Data ------------------------------------------------------------
>   
>   #######################################
>   ### New Functions #####################
>   #######################################
>   
>   ### Add/Substract Minutes
>   mns <- function(m) {
+     x <- m * 60
+     return(x)
+   }
>   
>   ### set positive data quality
>   func_dq <- function(m) {
+     x <- ((100 - (m - (m %% 10)))*10) + (10 - (m %% 10))
+     return(x)
+   }
>   
>   ### random rows
>   randomRows = function(df, n){
+     return(df[sample(nrow(df),n),])
+   }
>   
>   ### change ten-ers
>   changeTens = function(i, x){
+     return(
+       x + (i %% 10)
+     )
+   }
>   
>   ## offset by lvl of inspection
>   offset <- function(i) {
+     j = NA
+     if (i == 1) {
+       j =  5  ## 10 Min
+     } else if (i == 2) {
+       j = 10  ## 20 Min
+     } else if (i == 3) {
+       j = 25  ## 50 Min
+     } else if (i == 4) {
+       j = 50 ## 100 Min
+     } else if (i == 5) {
+       j = 100 ## 200 Min
+     } else if (i == 6) {
+       j = 250 ## 500 Min
+     } else if (i == 7) {
+       j = 500 ##1000 Min
+     } 
+     return(j)
+   }
>   
>   #######################################
>   ### connect to the sqlite file ########
>   #######################################
>   
>   initiation <- Sys.time() #format(Sys.time(), "%Y-%m-%d %H:%M:%OS6", tz = "UTC")
>   
>   ### Create an ephemeral in-memory RSQLite database
>   con_freyr <- DBI::dbConnect(RSQLite::SQLite(), db_path)
>   #alltables = dbListTables(con_freyr)
>   #dbListTables(con_freyr)
>   
>   ### fetch all results: ## location instead of Source!
>   res <- DBI::dbSendQuery(con_freyr, "
+                      SELECT
+                      r.id reading_id,
+                      r.measure measure_id,
+                      m.absolute_min measure_absolute_min,
+                      m.absolute_max measure_absolute_max,
+                      r.reading reading,
+                      rl.read_log read_log,
+                      rl.sensor_id sensor_id,
+                      rl.location_id location_id, 
+                      rl.utc_start utc_start,
+                      rl.utc_end utc_end,
+                      r.data_quality data_quality,
+                      r.measure_target target_id
+                      FROM
+                      (
+                      SELECT
+                      lg.id read_log,
+                      lg.sensor sensor_id,
+                      --lg.source source_id, 
+                      s.location location_id,
+                      --lg.offset_utc offset_utc,
+                      --lg.duration_sec duration_sec, 
+                      lg.utc_start utc_start,
+                      lg.utc_end utc_end
+                      FROM
+                      read_log lg
+                      LEFT JOIN
+                      source s ON lg.source = s.id
+                      ) rl
+                      LEFT JOIN
+                      readings r ON rl.read_log = r.read_log
+                      LEFT JOIN
+                      measures m ON r.measure = m.id
+                      ORDER BY
+                      r.id desc
+                      --WHERE
+                      --rl.utc_start
+                      --LIMIT 120  -- only for development
+                      ")
>   ### for development only 1200 lines are fetched, 
>   ### later date driven limit (i.e. 1 month, 
>   ### quarter, year) should be applied
>   freyr_readings <- DBI::dbFetch(res, n = -1)
Error: cannot allocate vector of size 14.7 Mb
Execution halted
Warning message:
system call failed: Cannot allocate memory 
et global data ###################
>   #######################################
>   
>   ### Change class of date-time  
>   freyr_readings$utc_start <- strptime(freyr_readings$utc_start, "%Y-%m-%d %H:%M:%OS", tz = "UTC")
>   freyr_readings$utc_end <- strptime(freyr_readings$utc_end, "%Y-%m-%d %H:%M:%OS", tz = "UTC")
Killed
